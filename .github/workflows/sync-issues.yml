# .github/workflows/sync-issues.yml
name: Sync Issues from JSON

on:
  push:
    paths:
      - 'issues.json'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Sync issues (with milestones & links)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const snapshot = JSON.parse(fs.readFileSync('issues.json', 'utf-8'));

            for (const [repo, issues] of Object.entries(snapshot.repos)) {
              // 1) Load existing milestones
              const { data: existingMilestones } = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo,
                state: 'all'
              });
              const milestoneMap = Object.fromEntries(
                existingMilestones.map(m => [m.title, m.number])
              );

              // helper to ensure a milestone exists
              async function ensureMilestone(title, dueOn) {
                if (!title) return null;
                if (milestoneMap[title]) return milestoneMap[title];
                const { data: newM } = await github.rest.issues.createMilestone({
                  owner: context.repo.owner,
                  repo,
                  title,
                  due_on: dueOn || null
                });
                milestoneMap[title] = newM.number;
                return newM.number;
              }

              for (const item of issues) {
                const msNum = await ensureMilestone(
                  item.milestone?.title,
                  item.milestone?.due_on
                );

                // 2) Search for existing open issue by title
                const { data: searchRes } = await github.rest.search.issuesAndPullRequests({
                  q: `repo:${context.repo.owner}/${repo} in:title "${item.title}" state:open`
                });

                let issueNumber;
                if (searchRes.total_count > 0) {
                  issueNumber = searchRes.items[0].number;
                  // update existing
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo,
                    issue_number: issueNumber,
                    title:     item.title,
                    body:      item.body,
                    labels:    item.labels,
                    assignees: item.assignees,
                    state:     item.state,
                    milestone: msNum
                  });
                  core.info(`🔄 Updated #${issueNumber} in ${repo}`);
                } else {
                  // create new
                  const { data: created } = await github.rest.issues.create({
                    owner:     context.repo.owner,
                    repo,
                    title:     item.title,
                    body:      item.body,
                    labels:    item.labels,
                    assignees: item.assignees,
                    milestone: msNum
                  });
                  issueNumber = created.number;
                  core.info(`✅ Created #${issueNumber} in ${repo}`);
                  if (item.state === 'closed') {
                    await github.rest.issues.update({
                      owner:        context.repo.owner,
                      repo,
                      issue_number: issueNumber,
                      state:        'closed'
                    });
                    core.info(`🔒 Closed #${issueNumber} in ${repo}`);
                  }
                }

                // 3) Comment linked issues
                const links = (item.linked_issues || []).concat(item.linked_refs || []);
                if (links.length) {
                  const comment = links
                    .map(l => `🔗 Relates to ${l.repo}#${l.number}`)
                    .join('\n');
                  await github.rest.issues.createComment({
                    owner:        context.repo.owner,
                    repo,
                    issue_number: issueNumber,
                    body:         comment
                  });
                  core.info(`💬 Commented links on #${issueNumber} in ${repo}`);
                }
              }
            }
